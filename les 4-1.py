# Задача 4-1. Проанализировать скорость и сложность одного любого алгоритма, разработанных в рамках домашнего задания первых трех уроков.
# Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

# -------- За основу берем "Задача 2-7. 
# -------- Напишите программу, доказывающую или проверяющую, что для множества
# -------- натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2, где n -
# -------- любое натуральное число."


# Реализация 1: Использование рекурсивной функции. 
# Алгоритм имеет экспоненциальную сложность - O (2 ^ n). Сложность алгоритма растет очень быстро.
def sum_num_rec(x):
  """Рекурсивная функция. 
  Подсчитывает сумму элементов от 1 до x."""
  if x == 1:
    return 1
  else:
    return x + sum_num_rec(x-1)

    
# Реализация 2: Применение итеративного обхода элементов последовательности.
    # Линейная сложность алгоритма О(n) - скорость выполнения алгоритма прямопропорциональна размеру элемента, полученного в качестве входящего аргумента х. Чем больше это число - тем больше итераций должна будет выполнить функция для получения результата.
def sum_num_add(x):
  """Итеративная функция.
  Подсчитывает сумму элементов от 1 до x."""
  s = 0
  for i in range(x+1):
    s += i
  return s  



# Вывод: Лучше использовать итеративную функцию. При 
n = int(input())

if sum_num_add(n) == n*(n+1)/2:
  print('True')
else:
  print('False')
