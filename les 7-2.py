# Задача7-2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив, заданный случайными числами на промежутке [0; 50). Выведите на экран исходный и отсортированный массивы.

# Сортировку списка будем проводить следующим способом: 
# 1  функция merg_sort будет делить рекурсивно список на два примерно равных по кол-ву элементов списка
# 2  функция sort_two_sorted_mas будет проводить слияние двух отсортированных списков 


import random


def merg_sort(m):
  """
  Функция рекурсивно делит получаемый список пополам до момента, пока список не станет равен 1
  Это базовый случай, когда функция начинает "возвращать"
  
  """
  if len(m) == 1:
    return m
  avrg = len(m) // 2
  l, r = merg_sort(m[:avrg]), merg_sort(m[avrg:])   #   Как только наступил базовый случай в 
  #  рекурсии и мы получили 2 списка по 1 элементу (Затем 2 списка по 2 эл-та и т.д...)
  return sort_two_sorted_mas(l, r) # возвращаем единый список, обернув списки l, r в метод 
  # слияния с сортировкой sort_two_sorted_mas
  

def sort_two_sorted_mas(l, r):
  """
  Функция слияния двух отсортированных списков
  
  """
  i = j = 0    # Будем сравнивать элементы списков, начиная с первого индекса
  sort_mas = []   #  Финальный список

  while i < len(l) and j < len(r):   # пока индексы меньше длины каждого из списка, сортируем
    if l[i] < r[j]:
      sort_mas.append(l[i])
      i += 1
    else:
      sort_mas.append(r[j])
      j += 1

  if i < len(l):   # если один список был длиннее другого, оставшиеся в нем элементы нужно 
    # переложить в финальный список
    sort_mas = sort_mas + l[i:]
  if j < len(r):
    sort_mas = sort_mas + r[j:]

  return sort_mas


if __name__ == '__main__':
  mas = [round(random.uniform(0, 50), 3) for i in range(9)] # сформируем список из 10 эл-тов
  print(mas)
  mas_sort = merg_sort(mas)
  print(mas_sort)

# ТЕСТИРОВАНИЕ (при каждом вызове набор чисел будет отличаться)
# Исходный массив
# print(mas)  ->  [42.627, 36.509, 8.903, 32.929, 26.728, 38.206, 47.324, 7.688, 11.889]
# Отсортированный массив
# print(mas_sort)  ->  [7.688, 8.903, 11.889, 26.728, 32.929, 36.509, 38.206, 42.627, 47.324]
