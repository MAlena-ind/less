# Задача5-2. Написать программу сложения и умножения двух шестнадцатеричных чисел. При этом каждое число представляется как массив, элементы которого это цифры числа. Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно. Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].
from collections import deque


def get_ox():
  """
  Функция возвращает словарь соответствия строкового обозначения шестнадцатеричных чисел
  числам в десятиричном формате.
  """
  nms = {'0': 0, '1': 1, '2': 2,
         '3': 3, '4': 4, '5': 5,
         '6': 6, '7': 7, '8': 8,
         '9': 9, 'A': 10,'B': 11,
         'C': 12, 'D': 13, 'E': 14, 
         'F': 15}
  return nms


def get_key(dct, value):
  """
  Функция возвращает ключ словаря, соответствующий значению.
  dct - словарь поиска
  value - значение элемента словаря для поиска ключа
  """
  return list(dct.keys())[list(dct.values()).index(value)]

  
  
def sum_num_ox(num_1, num_2):
  """
  Функция сложения двух шестнадцатеричных чисел.
  """
  res = deque() #Создадим двунаправленную очередь для возможности добавления элементов в начало и конец очереди, для формирования результата сложения
  nums_ox = get_ox() #Получаем словарь соответствия 16-ричных и 10-ричных чисел
  num1, num2 = num_1.copy(), num_2.copy()#будем работать с копиями переданных чисел 
  
  if len(num1) < len(num2): #установим, чтобы первое число стало короче второго
    num1, num2 = num2, num1 

  y = 0 #переменная для учета прибавления десятков в старший десяток
  
  while num1: #пока список символов более короткого числа не пустой
    x = nums_ox[num1.pop()] + nums_ox[num2.pop()] + y if len(num2) > 0 else nums_ox[num1.pop()] + y #сложим последние элементы первого и второго числа, предварительно переведя их в десятичную систему счисления. Так же прибавим десятки из переменной y. Если второе число закончилось работаем только с первым, более длинным
    y = 0 #обнулим переменную y

    if x > 15:
      y = x // 16
      x = x % 16
    res.appendleft(get_key(nums_ox, x))#кладем в деку слева шестнадцатеричный перевод х

  if y: #если в конце работы цикла в переменной y что-то лежит, положим шестнадцатеричный перевод y начало результата сложения. 
    res.appendleft(get_key(nums_ox, y))
    y = 0 #не обязательная строчка. Сборщик мусора и так удалит эту переменную

  return list(res)
                                

def mul_num_ox(num1, num2):
  """
  Функция умножения двух шестнадцатеричных чисел.
  """
  nums_ox = get_ox()#Получаем словарь соответствия 16-ричных и 10-ричных чисел

  mul = [] # Список для хранения результатов умножения
  c = 0 # счетчик для смещения разрядов 
  for j in list(reversed(num1)): # умножим каждую цифру первого числа...
    res = deque() 
    y = 0 #переменная для учета прибавления десятков в старший десяток
    for i in list(reversed(num2)):#...на каждую цифру второго числа
      x = nums_ox[j]*nums_ox[i] + y #умножение + прибавление десятков из переменной y
      y = 0#обнулим переменную y
      while x > 15: #до тех пор, пока х больше 15, уменьшаем х и увеличиваем y
        x -= 16
        y += 1
      res.appendleft(get_key(nums_ox, x))#кладем в деку слева шестнадцатеричный перевод x
      
    if y:  #если в конце работы цикла в переменной y что-то лежит, положим это в начало результата сложения. 
      res.appendleft(get_key(nums_ox, y))
      
    if mul: #если в результате лежат данные 
      c = c + 1
      res.extend(['0'] * c)
      mul = sum_num_ox(mul, list(res))#вызовем функцию сложения для складывания того, что уже лежит в результатирующем списке с новым списком, полученным путем умножения следующей цифры первого числа на второе число
    else: #если результат пока пустой, положим туда список, полученный путем умножения первой цифры первого числа на второе число
      mul = list(res)
      
  return list(mul)    
      

a, b = map(list, (input('Введите 2 шестнадцатеричных числа через пробел: ').split()))
print(f'Результат сложения чисел: {sum_num_ox(a, b)}.\nРезультат умножения: {mul_num_ox(a, b)}.')


# ТЕСТИРОВАНИЕ:
# Введите 2 шестнадцатеричных числа через пробел: DD8 E5
# Результат сложения чисел ['E', 'B', 'D'].
# Результат умножения: ['C', '6', '2', '3', '8'].

# Введите 2 шестнадцатеричных числа через пробел: 45 BA6
# Результат сложения чисел: ['B', 'E', 'B'].
# Результат умножения: ['3', '2', '3', 'B', 'E'].
